# Sticker Module Migration Guide

## Migration Reference Sources
Always reference these working implementations when migrating sticker functionality:

### Backend Sources
- [medusa4/my-sticker-store/src/modules/sticker-pricing/](mdc:medusa4/my-sticker-store/src/modules/sticker-pricing/) - Complete sticker pricing module
- [medusa4/my-sticker-store/src/modules/sticker-pricing/service.ts](mdc:medusa4/my-sticker-store/src/modules/sticker-pricing/service.ts) - Service implementation
- [medusa4/my-sticker-store/src/modules/sticker-pricing/pricing-calculator.ts](mdc:medusa4/my-sticker-store/src/modules/sticker-pricing/pricing-calculator.ts) - Core pricing logic
- [medusa4/my-sticker-store/src/modules/sticker-pricing/models/sticker-config.ts](mdc:medusa4/my-sticker-store/src/modules/sticker-pricing/models/sticker-config.ts) - Data models
- [medusa4/my-sticker-store/src/workflows/add-sticker-to-cart.ts](mdc:medusa4/my-sticker-store/src/workflows/add-sticker-to-cart.ts) - Cart workflow

### Frontend Sources
- [medusa4/my-sticker-store-storefront/src/modules/products/](mdc:medusa4/my-sticker-store-storefront/src/modules/products/) - Product UI components
- [medusa4/my-sticker-store-storefront/src/modules/cart/](mdc:medusa4/my-sticker-store-storefront/src/modules/cart/) - Cart UI components

## Migration Target Structure
When migrating, follow this structure in the main project:

### Backend Structure
```
backend/src/modules/sticker-pricing/
├── index.ts                    # Module definition
├── service.ts                  # StickerPricingService
├── pricing-calculator.ts       # Core pricing logic
└── models/
    └── sticker-config.ts       # Data models
```

### Workflows
```
backend/src/workflows/
├── add-sticker-to-cart.ts      # Cart workflow
└── sticker-pricing/
    └── calculate-sticker-pricing.ts
```

### API Routes
```
backend/src/api/store/
├── stickers/
│   ├── calculate-pricing/
│   └── pricing-tiers/
└── carts/
    └── [id]/
        └── stickers/
```

## Key Migration Patterns

### 1. Module Structure
- Each module must have an `index.ts` with Module definition
- Use `MedusaService` base class for services
- Export module constant (e.g., `STICKER_PRICING_MODULE`)

### 2. Pricing Calculator
- Implement quantity-based pricing tiers
- Support both default and database-driven pricing
- Handle validation and error cases
- Return pricing breakdown with savings

### 3. Workflows
- Use `createWorkflow` and `createStep` from Medusa framework
- Implement custom pricing in cart workflows
- Handle price recalculation on quantity changes

### 4. API Integration
- Create store API routes for pricing calculations
- Implement proper error handling
- Use Medusa's request/response types

## Testing Strategy
- Unit tests for pricing calculator: [medusa4/my-sticker-store/tests/sticker-pricing.test.ts](mdc:medusa4/my-sticker-store/tests/sticker-pricing.test.ts)
- Integration tests for API endpoints
- E2E tests for cart functionality

## Configuration
- Add sticker module to [backend/medusa-config.js](mdc:backend/medusa-config.js)
- Set up database models and migrations
- Configure pricing tiers and variant IDs
