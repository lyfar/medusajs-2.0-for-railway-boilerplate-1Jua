# File Organization Standards

## Backend File Structure
```
backend/src/
├── modules/
│   └── [module-name]/
│       ├── index.ts                # Module export
│       ├── service.ts              # Service implementation
│       ├── models/                 # Data models
│       │   └── [model-name].ts
│       └── tests/                  # Module tests
│           └── [module-name].test.ts
├── workflows/
│   ├── [workflow-name].ts          # Simple workflows
│   └── [module-name]/              # Module-specific workflows
│       └── [workflow-name].ts
├── api/
│   ├── admin/
│   │   └── [endpoint]/
│   │       └── route.ts
│   └── store/
│       └── [endpoint]/
│           └── route.ts
├── subscribers/
│   └── [event-name].ts
└── lib/
    └── [utility-name].ts
```

## Frontend File Structure
```
storefront/src/
├── app/
│   └── [countryCode]/
│       ├── (checkout)/
│       └── (main)/
├── modules/
│   └── [feature]/
│       ├── components/
│       │   └── [component-name]/
│       │       ├── index.tsx
│       │       └── [component-name].tsx
│       └── templates/
│           └── [template-name].tsx
├── lib/
│   ├── data/
│   │   └── [data-source].ts
│   ├── hooks/
│   │   └── [hook-name].tsx
│   └── util/
│       └── [utility-name].ts
└── types/
    └── [type-category].ts
```

## Naming Conventions
- **Files**: kebab-case (e.g., `sticker-pricing.ts`)
- **Directories**: kebab-case (e.g., `sticker-pricing/`)
- **Components**: PascalCase (e.g., `StickerPricing`)
- **Functions**: camelCase (e.g., `calculatePricing`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `STICKER_PRICING_MODULE`)
- **Interfaces**: PascalCase with 'I' prefix (e.g., `IPricingTier`)
- **Types**: PascalCase (e.g., `PricingTier`)

## Import Organization
```typescript
// 1. Framework imports
import { Module } from "@medusajs/framework/utils"
import { createWorkflow } from "@medusajs/framework/workflows-sdk"

// 2. External libraries
import { z } from "zod"

// 3. Internal modules
import { StickerPricingService } from "../modules/sticker-pricing"
import { calculatePricing } from "../lib/utils"

// 4. Relative imports
import "./styles.css"
```

## Export Patterns
```typescript
// Named exports preferred
export const STICKER_PRICING_MODULE = "stickerPricing"
export class StickerPricingCalculator {}
export type PricingTier = {}

// Default export for main module/component
export default StickerPricingService
```

## Documentation Standards
- README.md in each module directory
- JSDoc comments for all public functions
- Type definitions for all interfaces
- Examples in documentation
- Reference existing implementations in medusa4/

## File Size Guidelines
- Keep files under 500 lines
- Split large files into logical modules
- Use barrel exports (index.ts) for clean imports
- Separate types, interfaces, and implementations
