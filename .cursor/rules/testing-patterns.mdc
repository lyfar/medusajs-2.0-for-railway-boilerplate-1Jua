# Testing Patterns for Medusa v2

## Test File Organization
- Unit tests for modules: `src/modules/*/tests/`
- Integration tests: `tests/`
- E2E tests: `e2e/`

## Reference Test Implementation
- [medusa4/my-sticker-store/tests/sticker-pricing.test.ts](mdc:medusa4/my-sticker-store/tests/sticker-pricing.test.ts) - Comprehensive sticker pricing tests

## Test Structure Pattern
```typescript
import { medusaIntegrationTestRunner } from "@medusajs/test-utils"
import { ModuleRegistrationName } from "@medusajs/framework/utils"

jest.setTimeout(30000)

medusaIntegrationTestRunner({
  testSuite: ({ medusaApp }) => {
    describe("Module Tests", () => {
      it("should perform expected behavior", async () => {
        // Test logic here
      })
    })
  }
})
```

## Testing Requirements
- Unit tests for all pricing calculator methods
- Integration tests for API endpoints
- E2E tests for cart workflow
- Test error cases and edge conditions
- Mock external dependencies
- Use Jest for test framework

## Test Data Setup
```typescript
const testData = {
  quantity: 50,
  variantId: "test-variant-id",
  expectedPrice: 3500
}
```

## Assertion Patterns
```typescript
// Price calculation assertions
expect(result.totalPrice).toBe(expectedPrice)
expect(result.unitPrice).toBe(expectedUnitPrice)
expect(result.appliedTier).toMatchObject(expectedTier)

// Error handling assertions
expect(() => calculator.calculatePricing(0)).toThrow()
expect(error.message).toContain("expected error message")
```

## Mock Patterns
```typescript
// Service mocking
const mockService = {
  calculatePricing: jest.fn(),
  findStickerConfig: jest.fn()
}

// Container mocking
const mockContainer = {
  resolve: jest.fn().mockReturnValue(mockService)
}
```
