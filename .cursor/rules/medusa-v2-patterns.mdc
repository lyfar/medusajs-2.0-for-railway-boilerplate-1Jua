# Medusa v2 Development Patterns

## Code Quality Standards
- Use TypeScript strict mode
- No `any` types unless absolutely necessary
- Proper interface definitions for all data structures
- Comprehensive error handling with try-catch blocks
- JSDoc comments for all public methods

## Module Development
```typescript
// Module definition pattern
import { Module } from "@medusajs/framework/utils"
import ServiceClass from "./service"

export const MODULE_NAME = "moduleName"

export default Module(MODULE_NAME, {
  service: ServiceClass,
})
```

## Service Pattern
```typescript
// Service class pattern
import { MedusaService } from "@medusajs/framework/utils"
import { ModelClass } from "./models/model"

class CustomService extends MedusaService({
  ModelClass,
}) {
  // Service methods here
}

export default CustomService
```

## Model Definition
```typescript
// Data model pattern
import { model } from "@medusajs/framework/utils"

export const ModelName = model.define("table_name", {
  id: model.id().primaryKey(),
  field: model.text(),
  isActive: model.boolean().default(true),
  createdAt: model.dateTime(),
  updatedAt: model.dateTime()
})
```

## Workflow Pattern
```typescript
// Workflow definition
import { createWorkflow, createStep, StepResponse, WorkflowResponse } from "@medusajs/framework/workflows-sdk"

export const stepName = createStep(
  "step-name",
  async (input: InputType, { container }) => {
    // Step logic
    return new StepResponse(result)
  }
)

export const workflowName = createWorkflow(
  "workflow-name",
  (input: InputType) => {
    const result = stepName(input)
    return new WorkflowResponse(result)
  }
)
```

## API Route Pattern
```typescript
// API route pattern
import { MedusaRequest, MedusaResponse } from "@medusajs/framework/http"

export async function GET(
  req: MedusaRequest,
  res: MedusaResponse
) {
  // Route logic
  return res.json({ data: result })
}
```

## Error Handling
- Use try-catch blocks for all async operations
- Provide meaningful error messages
- Log errors appropriately
- Return proper HTTP status codes

## Import Patterns
- Use framework imports from "@medusajs/framework/*"
- Import utils from "@medusajs/framework/utils"
- Import workflows from "@medusajs/framework/workflows-sdk"
- Import HTTP types from "@medusajs/framework/http"
