# Next.js 14 Storefront Patterns

## App Router Structure
- Use App Router with `[countryCode]` dynamic routing
- Separate `(checkout)` and `(main)` route groups
- Follow the existing pattern in [storefront/src/app/](mdc:storefront/src/app/)

## Reference Frontend Implementation
- [medusa4/my-sticker-store-storefront/src/modules/](mdc:medusa4/my-sticker-store-storefront/src/modules/) - Working sticker UI components
- [medusa4/my-sticker-store-storefront/src/lib/](mdc:medusa4/my-sticker-store-storefront/src/lib/) - Data fetching utilities

## Component Organization
```
src/modules/
├── products/
│   ├── components/
│   │   ├── product-actions/
│   │   └── product-info/
│   └── templates/
│       └── product-template.tsx
├── cart/
│   ├── components/
│   │   ├── cart-item/
│   │   └── cart-totals/
│   └── templates/
│       └── cart-template.tsx
└── common/
    ├── components/
    └── icons/
```

## Data Fetching Pattern
```typescript
// Use server components for data fetching
export default async function ProductPage({ params }: { params: { handle: string } }) {
  const product = await getProductByHandle(params.handle)
  return <ProductTemplate product={product} />
}

// Use client components for interactivity
"use client"
export default function AddToCartButton({ variant }: { variant: ProductVariant }) {
  const [isLoading, setIsLoading] = useState(false)
  
  const handleAddToCart = async () => {
    // Cart logic
  }
  
  return <button onClick={handleAddToCart}>Add to Cart</button>
}
```

## State Management
- Use React hooks for local state
- Use context for global state (cart, user)
- Follow the pattern in [storefront/src/lib/context/](mdc:storefront/src/lib/context/)

## Styling
- Use Tailwind CSS classes
- Follow the existing design system
- Use globals.css for global styles: [storefront/src/styles/globals.css](mdc:storefront/src/styles/globals.css)

## API Integration
- Use data fetching functions from [storefront/src/lib/data/](mdc:storefront/src/lib/data/)
- Implement proper error handling
- Use TypeScript interfaces for API responses

## Form Handling
```typescript
// Form action pattern
export async function addToCartAction(formData: FormData) {
  const quantity = Number(formData.get("quantity"))
  const variantId = formData.get("variantId") as string
  
  // Add to cart logic
}
```

## Performance Optimizations
- Use Next.js Image component for images
- Implement proper loading states
- Use React.memo for expensive components
- Implement proper error boundaries
